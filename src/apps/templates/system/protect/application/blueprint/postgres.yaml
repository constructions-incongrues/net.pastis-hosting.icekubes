apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
  name: k10-postgres-logical-backup
  namespace: kasten-io
actions:
  backup:
    kind: StatefulSet
    outputArtifacts:
      pgBackup:
        kopiaSnapshot: '{{ .Phases.pgDump.Output.kopiaOutput }}'
    phases:
      - args:
          command:
            - bash
            - '-o'
            - errexit
            - '-o'
            - pipefail
            - '-c'
            - >
              export PGHOST='{{ index .Object.metadata.labels
              "app.kubernetes.io/instance" }}-postgresql.{{
              .StatefulSet.Namespace }}.svc.cluster.local'

              export PGUSER='postgres'

              export PGPASSWORD='{{ index .Phases.pgDump.Secrets.pgSecret.Data
              "postgresql-password" | toString }}'

              backup_file_path="backup.sql"

              pg_dumpall --clean -U $PGUSER | kando location push --profile '{{
              toJson .Profile }}' --path "${backup_file_path}" --output-name
              "kopiaOutput" -
          image: ghcr.io/kanisterio/postgres-kanister-tools:0.71.0
          namespace: '{{ .StatefulSet.Namespace }}'
        func: KubeTask
        name: pgDump
        objects:
          pgSecret:
            kind: Secret
            name: >-
              {{ index .Object.metadata.labels "app.kubernetes.io/instance"
              }}-postgresql
            namespace: '{{ .StatefulSet.Namespace }}'
  delete:
    inputArtifactNames:
      - pgBackup
    phases:
      - args:
          command:
            - bash
            - '-o'
            - errexit
            - '-o'
            - pipefail
            - '-c'
            - >
              backup_file_path="backup.sql"

              kopia_snap='{{ .ArtifactsIn.pgBackup.KopiaSnapshot }}'

              kando location delete --profile '{{ toJson .Profile }}' --path
              "${backup_file_path}" --kopia-snapshot "${kopia_snap}"
          image: ghcr.io/kanisterio/postgres-kanister-tools:0.71.0
          namespace: '{{ .Namespace.Name }}'
        func: KubeTask
        name: deleteDump
  restore:
    inputArtifactNames:
      - pgBackup
    kind: StatefulSet
    phases:
      - args:
          command:
            - bash
            - '-o'
            - errexit
            - '-o'
            - pipefail
            - '-c'
            - >
              export PGHOST='{{ index .Object.metadata.labels
              "app.kubernetes.io/instance" }}-postgresql.{{
              .StatefulSet.Namespace }}.svc.cluster.local'

              export PGUSER='postgres'

              export PGPASSWORD='{{ index
              .Phases.pgRestore.Secrets.pgSecret.Data "postgresql-password" |
              toString }}'

              backup_file_path="backup.sql"

              kopia_snap='{{ .ArtifactsIn.pgBackup.KopiaSnapshot }}'

              kando location pull --profile '{{ toJson .Profile }}' --path
              "${backup_file_path}" --kopia-snapshot "${kopia_snap}" - | psql -q
              -U "${PGUSER}"
          image: ghcr.io/kanisterio/postgres-kanister-tools:0.71.0
          namespace: '{{ .StatefulSet.Namespace }}'
        func: KubeTask
        name: pgRestore
        objects:
          pgSecret:
            kind: Secret
            name: >-
              {{ index .Object.metadata.labels "app.kubernetes.io/instance"
              }}-postgresql
            namespace: '{{ .StatefulSet.Namespace }}'
